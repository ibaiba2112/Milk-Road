IDEAS
- ADD A SCROLLER, STICKY
- EMAIL LIST
-SEARCH BAR ** 
-BUYER/SELLER - 
- JONATHAN IDEA OF INSERTING IMAGES AND FILE TYPES
- DAY/NIGHT MODE. BLACK/RED --> GREEN/WHITE **
-Cureency btcoin converter **
-Wallet **
-Avatar Icon

-DB STUFF 
--> CARS, CD, CLOTHES, TICKETS, PASSPORTS, **
--> Maybe a calculator????? **
---> Settings, profile pic etc
--> When typing passowrd, show option to reveal password
--> When adding to cart, add a count to the whole amount of stuff bought  **
--> Euro/dollar to bitcoin convert calculator  **
00> Use api? **
--> Make account page, with currency converted, show current wallet on top of screen, also a submission box to insert products as a shopkeeper, and to change account detials like name and username
--> Admin can delete any product from page and can also see all order history

Click Icons attribution
<a href="https://www.freepik.com/author/freepik/icons/special-lineal-color_15#from_element=families_block">Icon by Freepik</a>





NOT SURE WHY THIS WOULDN'T WORM
K
# @app.route("/registration", methods=["GET", "POST"])
# def registration():
#     form = RegisterForm()
#     if form.validate_on_submit():
#         first_name = form.first_name.data
#         last_name = form.last_name.data
#         birthday = form.birthday.data 
#         username = form.username.data

#         password1 = form.password1.data
#         password2 = form.password2.data
#         db = get_db()
#         duplicate_user = db.execute(
#         """SELECT * FROM UserInfo
#            WHERE username =?;""", (username,)).fetchone()
#         if duplicate_user is not None:
#             form.username.errors.append("Username already taken")
#         else:
#             db.execute("""
#                 INSERT INTO UserInfo (first_name, last_name, birthday, username, password
#                 VALUES (?, ?, ?, ?, ?);""",
#             (first_name, last_name, birthday, username, generate_password_hash(password1)))
#             db.commit()
#             return redirect(url_for('log') )
#     return render_template("registration.html", form=form)


 #TODO: FOR SEARCH BAR 
    # form = SearchForm()
    # product = None
    # if form.validate_on_submit():
    #     product = form.product.data
    # return render_template("index.html",form=form ,product=product)

    <!-- Search bar form/Not sure how to implement -->
<!-- <form action="" method="post" novalidate>
    {{ form.hidden_tag() }}
    {{ form.product.label }}
    {{ form.product() }}
    {% for error in form.product.errors %}
        {{ error }}
    {% endfor %}
    {{ form.submit() }}
</form> -->



